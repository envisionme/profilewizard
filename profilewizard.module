<?php
// $Id$
/**
 * @file
 * Custom module to handle a profile wizard for simplifying the signup process for users
 */
 
/**
 * Implementation of hook_help()
 */
function profilewizard_help($path, $args) {
  if ($path == 'admin/help#profilewizard') {
    $output = '<p>The profile module is a custom module for handling a simple profile wizard for new users</p>';
    return $output;
  }
}

/**
 * Implementation of hook_perm()
 */
function profilewizard_perm() {
  return array('use profile wizard', 'administer profile wizard');
}

/**
 * Implementation of hook_menu()
 */
function profilewizard_menu() {
	// $items = array();
  $items['admin/settings/profilewizard'] = array(
    'title' => 'Profile Wizard',
    'description' => 'Configure the profile wizard.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('profilewizard_settings_form'),
    'access arguments' => array('administer profile wizard'),
    'file' => 'profilewizard.admin.inc',
  );
	$items['node/%/profilewizard/step/%'] = array(
    'title' => 'Profile Wizard',
    'page callback' => 'profilewizard_wizard',
    'page arguments' => array(1,4),
    'access callback' => '_profilewizard_access_wizard',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Function to calculate access to menu
 *
 * @return boolean
 *  True if valid
 */
function _profilewizard_access_wizard($nid) {
  global $user;
  // $node = content_profile_load('uprofile', $uid);
	$node = node_load($nid);
	// return true;
  return $user && $user->uid &&
  (
    // The user is not blocked and logged in at least once.
    ($user->access && $user->status && ((user_access('use profile wizard') && $node->uid == $user->uid) || user_access('administer profile wizard')))
  );
}

/**
 * Implementation of hook_block()
 */
function profilewizard_block($op='list', $delta=0, $edit=array()) {
  switch($op) {
    case 'list':
      $block[0]['info'] = t('Profile Wizard');
      return $block;
    case 'view':
      $blocks['subject'] = t('');
      $blocks['content'] = _profilewizard_block();
      return $blocks;
  }
}

/**
 * Check if the user needs to use the profile wizard and provides the button to start the process
 *
 * @return string
 *  String with link to wizard
 */
function _profilewizard_block() {
  global $user;
	$type = variable_get('profilewizard_type', null);
	$steps = variable_get('profilewizard_steps', null);
	
	// load node
	if (arg(0) == 'node' && is_numeric(arg(1)))
		$node = node_load(arg(1));
	elseif (arg(0) == 'user' && is_numeric(arg(1))) {
		$node = content_profile_load('uprofile', arg(1));
	} else
		return;
	
	// if not on the step process display link to 1st step page
	if (user_access('use profile wizard') && arg(2) != 'profilewizard' && $node->type == $type) {
		if (module_exists('content_complete')) {
			$complete = content_complete_get_data($node);
			// only print link if profile not filled in
			if ($complete['percent'] <= 40)
				return l('Click here to start the Profile Wizard<span class="small">Complete the most crucial parts of your profile in just a few easy steps.</span>', 'node/'.$node->nid.'/profilewizard/step/1', array('html' => true, 'attributes' => array('class' => 'call-to-action')));
			else
				return;
		}
  } elseif (user_access('use profile wizard') && arg(2) == 'profilewizard' && $node->type == $type) {

		// add stylesheet
		drupal_add_css(drupal_get_path('module', 'profilewizard').'/profilewizard.css');
		
		// $node = node_load((int)arg(1));
		$step = (int)arg(3);

		$output = '';
		$step_list = array();
		if ($type == $node->type)
		// iterate through all steps and print label links
		for($i = 1; $i <= $steps; $i++) {
			$label = variable_get('profilewizard_label_step'.$i, null);
			$step_list[] = l($label == null?'Step '.$i:'<span class="step">'.$i.'</span> '.$label, 'node/'.$node->nid.'/profilewizard/step/'.$i, array('html' => true));
		}
		$output = theme_item_list($step_list, null, 'ul');
		return $output;
	}
}

/**
 * Callback returning the the correct form
 *
 * @return
 *  String data
 */
function profilewizard_wizard($nid, $step) {
  $output = '';
	$node = node_load($nid);
  // redirect if not the chosen wizard type
  if ($node->type != variable_get('profilewizard_type', null)) {
    drupal_not_found();
		exit();
	}
	drupal_set_title(variable_get('profilewizard_label_step'.$step, null));
  $output .= drupal_get_form('profilewizard_step_form', $node, $step);
  return $output;
}

/**
 * Implementation of step form
 */
function profilewizard_step_form($context, $node, $step) {
  $output = '';
  $form_id = $node->type.'_node_form';
  $form_state = array();
  $fields = variable_get('profilewizard_fields_step'.$step, null);
	
  // clean list of fields to show
  foreach($fields as $key => $field) {
     if ($field == null)
      unset($fields[$key]);
  }
  
  module_load_include('inc', 'node', 'node.pages'); 
  if (module_exists('filefield'))
		module_load_include('inc', 'filefield', 'filefield_widget');
  if (module_exists('imagefield'))
		module_load_include('inc', 'imagefield', 'imagefield_widget');

  // Initialize settings:
  $form = drupal_retrieve_form($form_id, $form_state, $node);
  unset($form['buttons']['preview']);
  unset($form['buttons']['delete']);
	unset($form['buttons']['submit']);
	unset($form['buttons']);
	
	// print submit buttons
	if ($step > 1)
	$form['buttons']['prev'] = array(
    '#type' => 'submit',
		'#access' => 1,
    '#value' => t('Previous'),
    '#weight' => 9,
    '#submit' => array('profilewizard_step_form_submit')
	);
	$form['buttons']['next'] = array(
    '#type' => 'submit',
		'#access' => 1,
    '#value' => $step == variable_get('profilewizard_steps', null)?t('Finish'):t('Next'),
    '#weight' => 10,
    '#submit' => array('profilewizard_step_form_submit')
	);
	$form['buttons']['skip'] = array(
    '#type' => 'submit',
		'#access' => 1,
    '#value' => t('Skip Process'),
    '#weight' => 11,
    '#submit' => array('profilewizard_step_form_submit')
	);
	
  drupal_prepare_form($form_id, $form, $form_state);
  // save all file field prepare data because they conflict after form processing
  $prepare_fields = array();
	// get all 'standard' groups
	$groups = fieldgroup_groups(variable_get('profilewizard_type', null));
	
  foreach($fields as $field) {
    // Update the cached form with the new element at the right place in the form.
		if (module_exists('fieldgroup'))
			$group_name = fieldgroup_get_group($node->type, $field);
		// if in a normal fieldset
		if (!empty($group_name)) {
			$prepare_fields[$field] = $form[$group_name][$field];
		} 
		// if a normal field (not multigroup)
		elseif (strlen(strstr($field, 'group_')) == 0) {
			$prepare_fields[$field] = $form[$field];
		} else {
			if (!empty($groups[$field]['parent']))
				$form[$field] = $form[$groups[$field]['parent']][$field];
		}
  }  
  drupal_process_form($form_id, $form, $form_state);
  
  // restore all filefield prepare data because of conflict
	foreach($fields as $field) {
		// Update the cached form with the new element at the right place in the form.
		if (!empty($prepare_fields[$field])) {
			$form[$field] = $prepare_fields[$field];
		}
  }
	
	$field_keys = array('#id', 'nid', 'vid', 'uid', 'created', 'type', 'language', 'changed', 'buttons', '#node', '#validate', '#theme', '#parameters', '#type', '#programmed', '#token', 'form_token', 'form_id', '#method', '#action', '#description', '#attributes', '#required', '#tree', '#parents', '#cache', '#pre_render', '#content_extra_fields', '#processed', '#defaults_loaded', '#field_info', '#build_id', 'form_build_id', '#multigroups');
  // hide unwanted fields
	foreach($form as $key => $field) {
		if (!in_array($key, $field_keys) && !in_array($key, $fields)) {
			
			// preserve fieldset hierarchy by hiding fieldsets
			if ($field['#type'] == 'fieldset') {
				$form[$key]['#access'] = false;
			} else {
				if (!empty($form[$key]['#type']))
					$form[$key]['#type'] = 'hidden';
				else
					unset($form[$key]);
			}
		}
	}
  
	// hide defaults
  $form['author']['#access'] = false;
  $form['options']['#access'] = false;
  $form['comment_settings']['#access'] = false;
  $form['path']['#access'] = false;
  $form['path_redirect']['#type'] = false;
  $form['print']['#access'] = false;
  $form['path']['#access'] = false;
  $form['path']['#access'] = false;
  $form['notifications']['#access'] = false;
	
	$form['markup-start'] = array('#value' => '<div id="profilewizard-form">', '#weight' => -10);
	$form['markup-end'] = array('#value' => '</div> <!-- #profilewizard-form -->', '#weight' => 1000);
	// pass form step number
	$form['profilewizard']['step'] = array(
		'#type' => 'value',
		'#value' => $step,
	);
	return $form;
}

/**
 * Implementation of step form submit
 */
function profilewizard_step_form_submit($form, &$form_state) {
	// redirect to home page if skip button clicked
	if ($form_state['clicked_button']['#value'] == 'Skip Process') {
		$form_state['redirect'] = '';
		return;
	}
	$step = (int)$form_state['values']['step'];
  $node = node_load($form_state['values']['nid']);
  $form_id = $node->type.'_node_form';
	// dpm($form_state['values']);
	// dpm($node);
	
  // $form_state_new = array();
	module_load_include('inc', 'node', 'node.pages');
	module_load_include('inc', 'filefield', 'filefield_widget');
  module_load_include('inc', 'imagefield', 'imagefield_widget');
  module_load_include('inc', 'content', 'includes/content.crud');
  // get fields from settings page
  // $values = array();
  $fields = variable_get('profilewizard_fields_step'.$step, null);
  // $values['op'] = t('Save');
  // $form_state['node'] = (array)$node;
	
  if ($form_state['clicked_button']['#value'] == 'Next' || $form_state['clicked_button']['#value'] == 'Finish') {
		// drupal_execute($form_id, $form_state, (object)$node);
		foreach($fields as $field) {
			// check if it's a multigroup and handle accordingly
			if (strlen(strstr($field, 'group_')) > 0) {
				foreach($form_state['values'][$field] as $delta => $group) {
					// save individual values
					if (is_numeric($delta) && !empty($group))
					foreach (array_keys((array)$group) as $field_name) {
						// copy only legitemate fields
						if ($field_name[0] != '_' && $field_name != null && !empty($group[$field_name][$delta]['value']))
							$node->{$field_name}[$delta]['value'] = $group[$field_name][$delta]['value'];
						// non-delta fields like date fix
						elseif (!empty($group[$field_name]['value'])) 
							$node->{$field_name}[$delta]['value'] = $group[$field_name]['value'];
					}
				}
			} else {
				// remove file fields
				if ($form_state['values'][$field][0]['fid'] > 0) {
					foreach($form_state['values'][$field] as $delta => &$file) {
						// check if must be removed
						// if (module_exists('imagefield_crop))
						if (array_key_exists('data', $file) && !$file['data']) {
							$file = null;
							$form_state['clicked_button']['#value'] = 'Refresh';
						}
						// check if new file is uploaded
						elseif (array_key_exists('field', $file) && !empty($file['field'])) {
							$form_state['clicked_button']['#value'] = 'Refresh';
						}
					}
					$node->$field = $form_state['values'][$field];
				}
				// Normal fields
				else
					$node->$field = $form_state['values'][$field];
			}
		}
		node_save($node);
	}
  // drupal_flush_all_caches();
	if (($form_state['clicked_button']['#value'] == 'Next' || $form_state['clicked_button']['#value'] == 'Finish') && $step < variable_get('profilewizard_steps', null))
		$form_state['redirect'] = 'node/'.$node->nid.'/profilewizard/step/'.($step+1);
	elseif ($form_state['clicked_button']['#value'] == 'Previous' && $step > 1)
		$form_state['redirect'] = 'node/'.$node->nid.'/profilewizard/step/'.($step-1);
	elseif ($form_state['clicked_button']['#value'] == 'Refresh')
		$form_state['redirect'] = 'node/'.$node->nid.'/profilewizard/step/'.($step);
	elseif ($step == variable_get('profilewizard_steps', null))
		$form_state['redirect'] = '';
}