<?php
// $Id$
/**
 * @file
 * Custom module to handle a profile wizard for simplifying the signup process for users
 */
 
/**
 * Implementation of hook_help()
 */
function profilewizard_help($path, $args) {
  if ($path == 'admin/help#profilewizard') {
    $output = '<p>The profile module is a custom module for handling a simple profile wizard for new users</p>';
    return $output;
  }
}

/**
 * Implementation of hook_perm()
 */
function profilewizard_perm() {
  return array('use profile wizard', 'administer profile wizard');
}

/**
 * Implementation of hook_menu()
 */
function profilewizard_menu() {
  $items['admin/settings/profilewizard'] = array(
    'title' => 'Profile Wizard',
    'description' => 'Configure the profile wizard.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('profilewizard_settings_form'),
    'access arguments' => array('administer profile wizard'),
    'file' => 'profilewizard.admin.inc',
  );
  $items['node/%/profilewizard/%'] = array(
    'title' => 'Profile Wizard',
    'page callback' => 'profilewizard_wizard',
    'page arguments' => array(1,3),
    'access callback' => '_profilewizard_access',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Function to calculate access to menu
 *
 * @return boolean
 *  True if valid
 */
function _profilewizard_access($nid) {
  global $user;
  $node = node_load($nid);
  return $user && $user->uid &&
  (
    // The user is not blocked and logged in at least once.
    ($user->access && $user->status && ((user_access('use profile wizard') && $node->uid == $user->uid) || user_access('administer profile wizard')))
  );
}

/**
 * Implementation of hook_block()
 */
function profilewizard_block($op='list', $delta=0, $edit=array()) {
  switch($op) {
    case 'list':
      $block[0]['info'] = t('Profile Wizard');
      return $block;
    case 'view':
      $blocks['subject'] = t('Profile Wizard');
      $blocks['content'] = _profilewizard_block();
      return $blocks;
  }
}

/**
 * Check if the user needs to use the profile wizard and provides the button to start the process
 *
 * @return string
 *  String with link to wizard
 */
function _profilewizard_block() {
  global $user;
  if (user_access('use profile wizard')) {
    return l('Profile Wizard', 'profilewizard/step/1');
  }
}

/**
 * Callback returning the the correct form
 *
 * @return
 *  JSON data
 */
function profilewizard_wizard($nid, $step) {
  $output = '';
  // module_load_include('inc', 'node', 'node.pages');
  $node = node_load($nid);
  // redirect if not the chosen wizard type
  if ($node->type != variable_get('profilewizard_type', null))
    drupal_not_found();
  switch($step) {
  	case 1:
    	// $output .= _profilewizard_step1($profile);
    	$output .= drupal_get_form('profilewizard_step1_form', $node);
      break;
  	case 2:
    	$output .= drupal_get_form('profilewizard_applicant_step2_form', $node);
      break;
  }
  return $output;
}

/**
 * Implementation of step 1 form
 */
function profilewizard_step1_form($context, $node) {
  $output = '';
  $form_id = $node->type.'_node_form';
  $form_state = array();
  
  module_load_include('inc', 'node', 'node.pages'); 
  
  // Initialize settings:
  $form = drupal_retrieve_form($form_id, $form_state, $node);
  unset($form['buttons']['preview']);
  unset($form['buttons']['delete']);

  drupal_prepare_form($form_id, $form, $form_state);
  drupal_process_form($form_id, $form, $form_state);
  $form['buttons']['submit']['#value'] = t('Next');
  $form['buttons']['submit']['#submit'] = array('profilewizard_step1_form_submit');
  // print_r($form);
  $field_keys = array('#id', 'nid', 'vid', 'uid', 'created', 'type', 'language', 'changed', 'buttons');
  // $field_types = array('text_textfield', 'textfield', 'checkbox', 'textarea');
  $fields = variable_get('profilewizard_fields', null);
  // clean list
  foreach($fields as $key => $field) {
     if ($field == null)
      unset($fields[$key]);
  }
  // print_r($fields);
  
  foreach($form as $key => $field) {
    if (!in_array($key, $field_keys) && !in_array($key, $fields)) {
        unset($form[$key]);
    }
  }
  
  // hide defaults
  $form['author']['#type'] = 'hidden';
  $form['options']['#type'] = 'hidden';
  $form['comment_settings']['#type'] = 'hidden';
  $form['path']['#type'] = 'hidden';
  $form['path_redirect']['#type'] = 'hidden';
  $form['print']['#type'] = 'hidden';
  $form['path']['#type'] = 'hidden';
  $form['path']['#type'] = 'hidden';
  $form['notifications']['#type'] = 'hidden';

  return $form;
}

/**
 * Implementation of step 1 form submit
 */
function profilewizard_step1_form_submit($form, &$form_state) {
  // echo '<pre>'.print_r($form_state, 1).'</pre>';
  $node = node_load($form_state['values']['nid']);
  
  $form_id = $node->type.'_node_form';
  $form_state_new = array();
  $values = array();
  // module_load_include('inc', 'node', 'node.pages');
  // get fields from settings page
  $fields = variable_get('profilewizard_fields', null) ;
  foreach($fields as $field) {
    $values[$field] = $form_state['values'][$field];
  }
  $values['op'] = t('Save');
  $form_state_new['values'] = $values;
  $form_state_new['node'] = (array)$node;
  
  drupal_execute($form_id, $form_state_new, (object)$node);
  drupal_flush_all_caches();
}

function profilewizard_applicant_step2_form($context, $profile) {
  $output = '';
  $node = $profile;
  $form_id = $profile->type.'_node_form';
  $form_state = array();
  
  module_load_include('inc', 'node', 'node.pages'); 
  
  // Initialize settings:
  $form_old = drupal_retrieve_form($form_id, $form_state, $profile);
  drupal_prepare_form($form_id, $form_old, $form_state);
  drupal_process_form($form_id, $form_old, $form_state);
  
  /* $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Next'),
    '#weight' => 999,
  ); */
  $form_old['#id'];
  $form_old['#action'];
  // $form_old['#validate'] = array('ourmodule_ourvalidationfunc' => array());
  unset($form_old['#submit']);
  unset($form_old['buttons']);
  // $form_old['submit'] = array('profilewizard_applicant_step2_form_submit'); 
  // $form_old['buttons']['submit']['#submit'] = array('profilewizard_applicant_step2_form_submit'); 
  
  // print_r($form_old['group_about']['field_app_dob']);
  // $form['group_about']['field_app_dob'] = $form_old['group_about']['field_app_dob'];
  // print_r($form_old);
  return $form_old; 
}

function profilewizard_applicant_step2_form_submit($form, &$form_state) {
  $node = get_user_profile();
  $form_id = $node->type.'_node_form';
  $form_state_new = array();
  module_load_include('inc', 'node', 'node.pages'); 
  
  // Initialize settings:
  $form_old = drupal_retrieve_form($form_id, $form_state_new, $node);
  drupal_prepare_form($form_id, $form_old, $form_state_new);
  drupal_process_form($form_id, $form_old, $form_state_new);
  // $form_state_new['values']['field_app_dob'][0]['value'] = $form_state['clicked_button']['#post']['field_app_dob'][0]['value']['date'];
  // print_r($form_state_new['values']['field_profile_image']);
  // print_r($form_state['values']['field_profile_image']);
  // print '123';
  // print_r($form_state_new);
  // $form_state = array_merge($form_state_new['values'], $form_state['values']);
  node_form_submit_build_node($form_id, $form_state_new);
  node_form_submit($form_id, $form_state_new);
  // print_r($form_state);
}

/**
 * get UID from url (user, company and node pages)
 *
 * @return number
 *  apropriate UID
 */
function get_uid_from_url() {
  // return uid for normal pages
  if (arg(0) == 'user' && is_numeric(arg(1)))
    return arg(1);
  // return admin page holder uid
  if (arg(0) == 'user' && (arg(1) == null || arg(1) == 'admin') || arg(0) == 'recruiter' && arg(1) == 'admin' || arg(0) == 'company' && arg(1) == 'admin' || arg(0) == 'usersearch') {
    global $user;
    return $user->uid;
  }
  // return company uid
  if (arg(0) == 'company' && is_numeric(arg(1)))
    return arg(1);
  // return node author
  if (arg(0) == 'node' && is_numeric(arg(1))) {
    $node = node_load(arg(1));
    if ($node->type == 'page')
      return false;
    if ($node->type != 'reference')
      return $node->uid;
    else {
      return $node->field_user[0][uid];
    }
  }
  if (arg(0) == 'node' && arg(1) == 'add') {
    global $user;
    return $user->uid;
  }
  return false;
}

/**
 * get user image from $uid
 *
 * @return string
 *  Themed image output
 */
function get_user_image($uid = null, $preset = 'thumb-mini') {
  global $user;
  if ($uid == null)
    $uid = $user->uid;

  $user_tmp = user_load($uid);
  $image_path = $user_tmp->picture;
  if(in_array("applicant", $user_tmp->roles)) {
    if (!$image_path || !file_exists($image_path)) {
      // $result = db_query('SELECT nid FROM {node} n WHERE type = \'%s\' AND n.uid = %d LIMIT %d', 'uprofile', $user_tmp->uid, 1);
      // $result = db_fetch_object($result);
      $user_profile = get_user_profile($uid);
      if ($user_profile->field_gender[0]['value'] == 'Male')
        $image_path = 'sites/default/files/default-image-m.jpg';
      elseif ($user_profile->field_gender[0]['value'] == 'Female')
        $image_path = 'sites/default/files/default-image-f.jpg';
      else
        $image_path = 'sites/default/files/default-image.jpg';
    }
  } elseif (in_array("company", $user_tmp->roles)) {
    $user_profile = get_user_profile($uid);
    // if (file_exists($user_profile->field_company_logo[0]['filepath']))
      // $image_path = $user_profile->field_company_logo[0]['filepath'];
    // else
      $image_path = 'sites/default/files/default-image.jpg';
    // if ($preset == 'thumb-mini') 
      // $preset = 'company-mini';
  }
  return theme('imagecache', $preset, $image_path, 'View Profile', 'View Profile');
}

/**
 * get user profile from $uid
 *
 * @return object
 *  Node containing user profile
 */
function get_user_profile($uid = null) {
  global $user;
  if ($uid == null)
    $uid = $user->uid;

  $user_tmp = user_load($uid);
  if (in_array('applicant', $user_tmp->roles)) {
    $result = db_query('SELECT nid FROM {node} n WHERE type = \'%s\' AND n.uid = %d LIMIT %d', 'uprofile', $user_tmp->uid, 1);
  } elseif (in_array('company', $user_tmp->roles)) {
    $result = db_query('SELECT nid FROM {node} n WHERE type = \'%s\' AND n.uid = %d LIMIT %d', 'company', $user_tmp->uid, 1);
  }
  $result = db_fetch_object($result);
  return node_load($result->nid);
}

/**
 * get current position of applicant
 * @param $uid Integer
 *  to indicate UID of applicant
 */
function get_current_position($uid = null) {
  global $user;
  if ($uid == null)
    $uid = $user->uid;

  $user_tmp = user_load($uid);
  // check if user is an applicant and exit if not
  if (!in_array('applicant', $user_tmp->roles))
    return;
  
  $profile = get_user_profile($uid);
  $current_position = array();
  // print_r($profile);
  if (!empty($profile->field_app_job_history))
  foreach($profile->field_app_job_history as $job) {
    // print_r($job);
    if ($job['todate'] == 'Current') {
      $current_position['company'] = $job['company'];
      $current_position['position'] = $job['position'];
      return $current_position;
    }
  }
  return array('company' => '', 'position' => 'Currently Unemployed');
}
